---

- name: "Updating packages"
  apt:
    name: "*"
    state: latest
    update_cache: yes


- name: Install libretime
  include: libretime.yml

- name: Configure apache2
  include: apache_setup.yml
  tags:
    - apache

# UPGARDES
# We need to be cautious about upgrades as they can break everything and cause headaches
# It's almost as if they best way to upgrade is to relaunch an instance from scratch
# upon building it will use the latest packages. Then we can still use the ansible scripts to
# deploy updates to code.

# - name: Do a safe upgrade
#   apt: upgrade=safe update_cache={{ update_apt_cache }}
#   tags: upgrade

# - name: Ensure OpenSSl and libssl are the latest versions
#   apt: 
#     update_cache: "{{ update_apt_cache }}"
#     state: latest
#     name:
#       - openssl
#       - libssl-dev
#       - libssl-doc
#   tags: packages

# - name: Install base packages
#   apt:
#     update_cache: "{{ update_apt_cache }}"
#     state: latest
#     name:
#       - build-essential
#       - mercurial
#       - cmake
#       - yasm
#       - autoconf
#       - automake
#       - python
#       - python-dev
#       - python-pip
#       - python-pycurl
#       - supervisor
#       - libjpeg-dev
#       - libxml2-dev
#       - libxslt-dev
#       - ntp
#       - ca-certificates
#       - ruby
#       - git
#       - gettext
#       - ruby-sass
#       - dbus
#       - unzip
#       - curl
#       - ffmpeg
#       - apache2-utils
#       - python-passlib
#   tags: packages
#     # - ntpdate
#     # - ca-certificates
#     # - libffi-dev # needed to build pip cryptography

# # - npm

# #- name: Upgrade pip
# #  pip: name=pip state=latest
# #  tags: packages

# # - name: Install boto packages
# #   pip: name=boto3 state=latest
# #   tags: packages

# # - name: Set Timezone
# #   shell: timedatectl set-timezone {{timezone}}

# - name: Install virtualenv
#   pip: name=virtualenv state=latest
#   tags: packages

# # - name: Install latest url3lib stuff
# #   pip: name={{ item }} state=latest
# #   tags: packages
# #   with_items:
# #     - ndg-httpsclient 
# #     - pyopenssl
# #     - pyasn1
# #     - urllib3[secure]



# - name: Check if ffmpeg already install_codecs
#   stat: path=/usr/bin/ffmpeg
#   register: sym



# - name: Delete the ffmpeg sources folder
#   file: path={{ffmpeg_sources_dir}} state=absent
#   tags:
#     - ffmpeg
#   when: rebuild_ffmpeg

# - name: Create the ffmpeg sources folder
#   file: path={{ffmpeg_sources_dir}} state=directory
#   tags:
#     - ffmpeg
#   when: sym.stat.islnk is not defined or rebuild_ffmpeg



# - name: Delete the ffmpeg build folder
#   file: path={{ffmpeg_build_dir}} state=directory
#   tags:
#     - ffmpeg
#   when: rebuild_ffmpeg

# - name: Create the ffmpeg build folder
#   file: path={{ffmpeg_build_dir}} state=directory
#   tags:
#     - ffmpeg
#   when: sym.stat.islnk is not defined or rebuild_ffmpeg



# - include: install_codecs.yml
#   tags:
#     - ffmpeg
#   when: sym.stat.islnk is not defined or rebuild_ffmpeg

# - include: install_ffmpeg.yml
#   tags:
#     - ffmpeg
#   when: sym.stat.islnk is not defined or rebuild_ffmpeg
