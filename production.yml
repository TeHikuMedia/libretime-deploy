### PLAYBOOK FOR THE PRODUCTION SERVERS ###

- name: "Launch production {{ project_name }} server"
  hosts: localhost
  serial: "100%"
  vars_files:
    - env_vars/base.yml
    - env_vars/production.yml
    - env_vars/vault.yml
  vars:
    - server_type: web
  roles:
    - ec2
    - load-balance    
    # - s3
    # - cloudfront    
  tags:
    - production
    - launch
    - launch-production
    - remote


- name: "Provision production {{ project_name }} server"
  hosts: tag_project_env_server_type_{{ project_name }}_{{env_type}}_web
  serial: "100%"
  remote_user: ubuntu
  become: true
  vars:
    - setup_bitbucket_repo: yes
    - update_apt_cache: yes
    - rebuild_database: no
    - server_type: web
    - host_tag: tag_project_env_server_type_{{project_name}}_{{env_type}}_web
  vars_files:
    - env_vars/base.yml
    - env_vars/production.yml
    - env_vars/vault.yml
  roles:
    - base
    # - ec2-db
    # - memcached
    # - rabbitmq
  tags:
    - production
    - provision
    - provision-production
    - web
    - remote

# # tag_solrserver_staging # note that we didn't do the memchaceh server so only asking for webserver
# - name: "Deploy production {{ application_name }} solr server"
#   hosts: tag_project_env_server_type_{{ project_name }}_{{env_type}}_web # moving solr to same instance for now since it has such low usage 
#   remote_user: admin
#   sudo: yes
#   vars_files:
#     - env_vars/base.yml
#     - env_vars/production.yml
#     - env_vars/vault.yml
#   roles:
#     - search
#   tags:
#     - production
#     - deploy
#     - deploy-web
#     - deploy-production
#     - deploy-production-search
#     - remote

# - name: "Deploy to production {{ application_name }} WEB server"
#   hosts: tag_project_env_server_type_{{ project_name }}_{{env_type}}_web
#   serial: "100%"
#   remote_user: admin
#   become: true
#   vars:
#     - setup_bitbucket_repo: yes
#     - update_apt_cache: yes   
#     - ec2_solrserver_private_ip: 127.0.0.1  # moving solr to same instance for now since it has such low usage 
#     - server_type: web
#     - host_tag: tag_project_env_server_type_{{application_name}}_{{env_type}}_web    
#   vars_files:
#     - env_vars/base.yml
#     - env_vars/production.yml  
#     - env_vars/vault.yml
#   roles: 
#     - get-rds-facts
#     - web
#     - celery
#   tags:
#     - production
#     - deploy
#     - deploy-web
#     - deploy-primary
#     - deploy-production
#     - deploy-production-web
#     - remote


# # Use the secondary machine to create an AMI for autoscaling
# - name: "Set up autoscaling for {{ application_name }}"
#   hosts: localhost
#   vars:
#     - server_role: secondary
#     - server_type: web
#   vars_files:
#     - env_vars/base.yml
#     - env_vars/production.yml  
#     - env_vars/vault.yml
#     - group_vars/production.yml    
#   roles:
#     - ensure-ec2-stopped
#     - autoscale
#   tags:
#     - production    
#     - deploy
#     - deploy-asg
#     - deploy-production
#     - deploy-production-asg
#     - scale
#     - scale-asg
#     - scale-production
#     - scale-production-asg
#     - remote


# - name: Set securtity groups
#   hosts: localhost
#   serial: "100%"
#   vars_files:
#     - env_vars/base.yml
#     - env_vars/production.yml
#     - env_vars/vault.yml
#   vars:
#     - server_type: web
#   roles:
#     - load-balance
#   tags:
#     - staging
#     - launch
#     - launch-staging
#     - provision
#     - deploy
#     - scale
#     - deploy-web
#     - remote
#     - load-balance
